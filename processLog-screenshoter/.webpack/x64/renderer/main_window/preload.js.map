{"version":3,"file":"main_window/preload.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,MCnBA,MAAMQ,EAAa,EAAQ,KAC3BA,EAAWC,cAAcC,kBAAkB,cAAe,CAEtDC,aAAeC,GAAaJ,EAAWK,YAAYC,OAAO,gBAAiBF,GAC3EG,YAAa,IAAMP,EAAWK,YAAYC,OAAO,gBAGjDE,aAAc,IAAMR,EAAWK,YAAYC,OAAO,iBAElDG,cAAgBL,GAAaJ,EAAWK,YAAYC,OAAO,iBAAkBF,GAE7EM,SAAU,IAAMV,EAAWK,YAAYC,OAAO,aAE9CK,gBAAkBC,GAAUZ,EAAWK,YAAYC,OAAO,mBAAoBM,GAE9EC,YAAa,IAAMb,EAAWK,YAAYC,OAAO,gBAGjDQ,aAAeC,IACX,MAAMC,EAAW,CAACC,EAAOC,IAAYH,EAASG,GAG9C,OAFAlB,EAAWK,YAAYc,GAAG,cAAeH,GAElC,IAAMhB,EAAWK,YAAYe,eAAe,cAAeJ,K","sources":["webpack://processlog-screenshoter/external commonjs2 \"electron\"","webpack://processlog-screenshoter/webpack/bootstrap","webpack://processlog-screenshoter/./src/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// src/preload.ts\nconst electron_1 = require(\"electron\");\nelectron_1.contextBridge.exposeInMainWorld('electronAPI', {\n    // --- 既存の関数 ---\n    startCapture: (settings) => electron_1.ipcRenderer.invoke('start-capture', settings),\n    stopCapture: () => electron_1.ipcRenderer.invoke('stop-capture'),\n    // --- 👇 [追加] ---\n    // 設定の読み取り\n    readSettings: () => electron_1.ipcRenderer.invoke('settings:read'),\n    // 設定の書き込み\n    writeSettings: (settings) => electron_1.ipcRenderer.invoke('settings:write', settings),\n    // 統計の取得\n    getStats: () => electron_1.ipcRenderer.invoke('stats:get'),\n    // 最近のスクリーンショット一覧 (Data URL 配列) を取得\n    listScreenshots: (limit) => electron_1.ipcRenderer.invoke('screenshots:list', limit),\n    // ウィンドウを閉じる\n    closeWindow: () => electron_1.ipcRenderer.invoke('window:close'),\n    // Main プロセスからログメッセージを受け取るリスナー登録\n    // 使い方: window.electronAPI.onLogMessage((message) => { console.log(message); });\n    onLogMessage: (callback) => {\n        const listener = (event, message) => callback(message);\n        electron_1.ipcRenderer.on('log-message', listener);\n        // クリンアップ関数を返す (타입 일치 유지)\n        return () => electron_1.ipcRenderer.removeListener('log-message', listener);\n    },\n});\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","electron_1","contextBridge","exposeInMainWorld","startCapture","settings","ipcRenderer","invoke","stopCapture","readSettings","writeSettings","getStats","listScreenshots","limit","closeWindow","onLogMessage","callback","listener","event","message","on","removeListener"],"sourceRoot":""}