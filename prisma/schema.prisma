// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User{
    // Standard NextAuth primary key
    id                  String @id @default(cuid())
    // Existing project-specific system id (kept for compatibility)
    userSystemId        String @unique @default(cuid())
    name                String?
    email               String? @unique
    emailVerified       DateTime?
    image               String?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    accounts            Account[]
    sessions            Session[]
    taskLogs            UserTaskPersonalLog[]
}

model Account {
    id                  String @id @default(cuid())
    // userId references User.id to satisfy NextAuth adapter expectations
    userId              String
    userSystemId        String?
    type                String  //login type
    provider            String  //google
    providerAccountId   String
    token_type          String?
    scope               String?
    id_token            String?  @db.Text
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    access_token        String?  @db.Text
    expires_at          Int?
    refresh_token       String?  @db.Text
    session_state       String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session{
    id                  String @id @default(cuid())
    // userId references User.id (NextAuth standard)
    userId              String
    userSystemId        String?
    sessionToken        String @unique
    expires             DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken{
    identifier          String
    token               String @unique
    expires             DateTime

    @@unique([identifier, token])
}

model UserTaskPersonalLog{
    userSystemId        String
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    taskDateId          DateTime @db.Date //タスク日付(example : 2025-10-18)
    taskTempTxt         Json?        //もらったスクショ二つを分析した内容をJSONで保存
    taskContent         String?      //タスク内容
    user User @relation(fields: [userSystemId], references: [userSystemId], onDelete: Cascade)
    @@id([userSystemId, taskDateId])
    @@index([userSystemId, taskDateId(desc)])
}